>> Class
- Class giống như bản thiết kế
- object là đối tượng
- public : phạm vi truy cập được từ bên trong và bên ngoài Class
- private : chỉ có thể sử dụng method hay thuộc tính ở phạm vi class.

- contructor : hàm khởi tạo và phải nằm ở phạm vi public
    + hàm khởi tạo chạy khi class được gọi
    + khi khai báo biến class mà không tham số thì sẽ tự động tìm hàm khởi tạo không tham số => có thể khởi tạo ả hai hàm có tham số và không có tham số

>> pointer vs object
- con trỏ this
    + hàm khởi tạo và thuộc tính khi bị trùng thì khi khi gọi sẽ lấy thuộc tính gần nhất. thuộc tính có thể không được cập nhập
    + sử dụng con trỏ this
    + this là đối tượng đang thao tác

>> tính đóng gói
-  các thuộc tính sẽ thường được khai báo private
- thường sẽ lấy các thuộc tính bằng các settor và gettor func
- thuộc tính protected : chỉ có thể sử dụng bên trong class, muốn sử dụng ngoài class thì phải kế thừa.

>> tính kế thừa
- một đối tượng A có thể sở hữu đối tượng của đối tượng biến
- class con mới có thể kế thừa từ class cha
- thuộc tính truy cập
    + public : 
            |-> ngoài class
            |-> được phép kế thừa
            |-> trong class
    
    + protected :
            |-> trong class
            |-> được kế thừa
    
    + private :
            |-> truy cập bên trong class

>> tính đa hình
* nạp chồng
- nạp chồng hàm
- nạp chồng toán tử

ex
    class Point 
    {
        public:
            int x;
            int y;
            Point();

            Point (int x, int y)
            {
                this->x = x;
                this->y = y;
            }

            friend Point operator+(Point p1 , Point p2)
            {
                Point p3;
                p3.x = p1.x +p2.x;
                p3.y = p1.y + p2.y;

                return p3
            }
    };

    int main()
    {
        Point p1(1,2), p2(3,4)

        Point p3 = p1 + p2 ; // lỗi nếu chưa có nạp chồng

        cout<< p3.x << p3.y;
    }


- Ghi đè

    class Animal
    {
        public:
            void move()
            {
                cout<< "Animal move";
            }
    };

    class Dog : public Animal
    {
        public:
        void move()
        {
            cout<<" Dog move ";
        }

        void parent_move()
        {
            Animal::move();
        }
    };

    int main()
    {
        Animal animal;
        animal.move();

        Dog dog;
        dog.move();
        dog.parent_move();
    }

- phương thức ảo
    class Animal
    {
        virtual public:
            void move()
            {
                cout<< "Animal move";
            }
    };

    class Dog : public Animal
    {
        public:
        void move()
        {
            cout<<" Dog move ";
        }
    };

    int main()
    {
        Animal *animal = new Dog;

        animal->move(); // in ra animal move, trỏ tới move của animal
    }


    => virtual : tạo ra một hàm ảo
    + khi dùng con trỏ lớp cha để trỏ tới lớp con thì sẽ lấy phương thức của lớp con

>> hàm friend
- hàm bạn không được phép thừa kế
- tuy rằng được khai báo trong class nhưng hàm bạn không thuộc class
- hàm bạn có thể định nghĩa bên trong hoặc bên ngoài class
- hàm bạn có thể dùng ở bất cứ đâu trong chương trình

>> friend class
